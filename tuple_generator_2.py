"""
3. Есть два списка:
tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...

Количество генерируемых кортежей не должно быть больше длины списка tutors.
Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде:
 (<tutor>, None), например:
('Станислав', None)

### Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
 Подумать, в каких ситуациях генератор даст эффект.
"""
tutors  = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена', 'Федор', 'Валера', 'Ольга', 'Станислав', 'истощение']
#tutors  = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

def special_tuple_gen(tutors, klasses):
    master_len = len(tutors)
    slave_len  = len(klasses)
    for i in range(0, master_len):
        if (slave_len <= i):
            yield(tutors[i], None)
        else:
            yield(tutors[i], klasses[i])


t = special_tuple_gen(tutors, klasses)

print("generator proof: ", type(t))

for i in range(len(tutors)):
    print(next(t))

#print(*t)







